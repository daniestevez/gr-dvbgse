# auto-generated by grc.converter

id: dvbgse_bbheader_source
label: IP Packet Source
category: '[Core]/Digital Television/DVB-GSE'

parameters:
-   id: standard
    label: Standard
    dtype: enum
    options: [STANDARD_DVBS2, STANDARD_DVBT2]
    option_labels: [DVB-S2, DVB-T2]
    option_attributes:
        hide_dvbs2: [none, all]
        hide_dvbt2: [all, none]
        val: [dvbgse.STANDARD_DVBS2, dvbgse.STANDARD_DVBT2]
-   id: framesize1
    label: FECFRAME size
    dtype: enum
    options: [FECFRAME_NORMAL, FECFRAME_SHORT]
    option_labels: [Normal, Short]
    option_attributes:
        hide_medium: [all, all]
        hide_normal: [none, all]
        hide_short: [all, none]
        val: [dvbgse.FECFRAME_NORMAL, dvbgse.FECFRAME_SHORT]
    hide: ${ standard.hide_dvbt2 }
-   id: framesize2
    label: FECFRAME size
    dtype: enum
    options: [FECFRAME_NORMAL, FECFRAME_MEDIUM, FECFRAME_SHORT]
    option_labels: [Normal, Medium, Short]
    option_attributes:
        hide_medium: [all, none, all]
        hide_normal: [none, all, all]
        hide_short: [all, all, none]
        val: [dvbgse.FECFRAME_NORMAL, dvbgse.FECFRAME_MEDIUM, dvbgse.FECFRAME_SHORT]
    hide: ${ standard.hide_dvbs2 }
-   id: rate1
    label: Code rate
    dtype: enum
    options: [C1_2, C3_5, C2_3, C3_4, C4_5, C5_6]
    option_labels: [1/2, 3/5, 2/3, 3/4, 4/5, 5/6]
    option_attributes:
        val: [dvbgse.C1_2, dvbgse.C3_5, dvbgse.C2_3, dvbgse.C3_4, dvbgse.C4_5, dvbgse.C5_6]
    hide: ${ (framesize1.hide_normal if str(standard) == 'STANDARD_DVBT2' else 'all')
        }
-   id: rate2
    label: Code rate
    dtype: enum
    options: [C1_3, C2_5, C1_2, C3_5, C2_3, C3_4, C4_5, C5_6]
    option_labels: [1/3, 2/5, 1/2, 3/5, 2/3, 3/4, 4/5, 5/6]
    option_attributes:
        val: [dvbgse.C1_3, dvbgse.C2_5, dvbgse.C1_2, dvbgse.C3_5, dvbgse.C2_3, dvbgse.C3_4,
            dvbgse.C4_5, dvbgse.C5_6]
    hide: ${ (framesize1.hide_short if str(standard) == 'STANDARD_DVBT2' else 'all')
        }
-   id: rate3
    label: Code rate
    dtype: enum
    options: [C1_4, C1_3, C2_5, C1_2, C3_5, C2_3, C3_4, C4_5, C5_6, C8_9, C9_10, C2_9_VLSNR,
        C13_45, C9_20, C90_180, C96_180, C11_20, C100_180, C104_180, C26_45, C18_30,
        C28_45, C23_36, C116_180, C20_30, C124_180, C25_36, C128_180, C13_18, C132_180,
        C22_30, C135_180, C140_180, C7_9, C154_180]
    option_labels: [1/4, 1/3, 2/5, 1/2, 3/5, 2/3, 3/4, 4/5, 5/6, 8/9, 9/10, 2/9 VL-SNR,
        13/45, 9/20, 90/180, 96/180, 11/20, 100/180, 104/180, 26/45, 18/30, 28/45,
        23/36, 116/180, 20/30, 124/180, 25/36, 128/180, 13/18, 132/180, 22/30, 135/180,
        140/180, 7/9, 154/180]
    option_attributes:
        val: [dvbgse.C1_4, dvbgse.C1_3, dvbgse.C2_5, dvbgse.C1_2, dvbgse.C3_5, dvbgse.C2_3,
            dvbgse.C3_4, dvbgse.C4_5, dvbgse.C5_6, dvbgse.C8_9, dvbgse.C9_10, dvbgse.C2_9_VLSNR,
            dvbgse.C13_45, dvbgse.C9_20, dvbgse.C90_180, dvbgse.C96_180, dvbgse.C11_20,
            dvbgse.C100_180, dvbgse.C104_180, dvbgse.C26_45, dvbgse.C18_30, dvbgse.C28_45,
            dvbgse.C23_36, dvbgse.C116_180, dvbgse.C20_30, dvbgse.C124_180, dvbgse.C25_36,
            dvbgse.C128_180, dvbgse.C13_18, dvbgse.C132_180, dvbgse.C22_30, dvbgse.C135_180,
            dvbgse.C140_180, dvbgse.C7_9, dvbgse.C154_180]
    hide: ${ (framesize2.hide_normal if str(standard) == 'STANDARD_DVBS2' else 'all')
        }
-   id: rate4
    label: Code rate
    dtype: enum
    options: [C1_5_MEDIUM, C11_45_MEDIUM, C1_3_MEDIUM]
    option_labels: [1/5, 11/45, 1/3]
    option_attributes:
        val: [dvbgse.C1_5_MEDIUM, dvbgse.C11_45_MEDIUM, dvbgse.C1_3_MEDIUM]
    hide: ${ (framesize2.hide_medium if str(standard) == 'STANDARD_DVBS2' else 'all')
        }
-   id: rate5
    label: Code rate
    dtype: enum
    options: [C1_4, C1_3, C2_5, C1_2, C3_5, C2_3, C3_4, C4_5, C5_6, C8_9, C11_45,
        C4_15, C14_45, C7_15, C8_15, C26_45, C32_45, C1_5_VLSNR_SF2, C11_45_VLSNR_SF2,
        C1_5_VLSNR, C4_15_VLSNR, C1_3_VLSNR]
    option_labels: [1/4, 1/3, 2/5, 1/2, 3/5, 2/3, 3/4, 4/5, 5/6, 8/9, 11/45, 4/15,
        14/45, 7/15, 8/15, 26/45, 32/45, 1/5 VL-SNR SF2, 11/45 VL-SNR SF2, 1/5 VL-SNR,
        4/15 VL-SNR, 1/3 VL-SNR]
    option_attributes:
        val: [dvbgse.C1_4, dvbgse.C1_3, dvbgse.C2_5, dvbgse.C1_2, dvbgse.C3_5, dvbgse.C2_3,
            dvbgse.C3_4, dvbgse.C4_5, dvbgse.C5_6, dvbgse.C8_9, dvbgse.C11_45, dvbgse.C4_15,
            dvbgse.C14_45, dvbgse.C7_15, dvbgse.C8_15, dvbgse.C26_45, dvbgse.C32_45,
            dvbgse.C1_5_VLSNR_SF2, dvbgse.C11_45_VLSNR_SF2, dvbgse.C1_5_VLSNR, dvbgse.C4_15_VLSNR,
            dvbgse.C1_3_VLSNR]
    hide: ${ (framesize2.hide_short if str(standard) == 'STANDARD_DVBS2' else 'all')
        }
-   id: rolloff
    label: Rolloff factor
    dtype: enum
    options: [RO_0_35, RO_0_25, RO_0_20, RO_0_15, RO_0_10, RO_0_05]
    option_labels: ['0.35', '0.25', '0.20', '0.15', '0.10', '0.05']
    option_attributes:
        val: [dvbgse.RO_0_35, dvbgse.RO_0_25, dvbgse.RO_0_20, dvbgse.RO_0_15, dvbgse.RO_0_10,
            dvbgse.RO_0_05]
    hide: ${ standard.hide_dvbs2 }
-   id: inband
    label: In-band Signalling
    dtype: enum
    options: [INBAND_OFF, INBAND_ON]
    option_labels: ['Off', Type B]
    option_attributes:
        hide_rate: [all, none]
        val: [dvbgse.INBAND_OFF, dvbgse.INBAND_ON]
    hide: ${ standard.hide_dvbt2 }
-   id: fecblocks
    label: FEC blocks per frame
    dtype: int
    default: '168'
    hide: ${ inband.hide_rate }
-   id: tsrate
    label: Transport Stream Rate
    dtype: int
    default: '4000000'
    hide: ${ inband.hide_rate }
-   id: ping_reply
    label: Ping Reply
    dtype: enum
    options: [PING_REPLY_OFF, PING_REPLY_ON]
    option_labels: ['Off', 'On']
    option_attributes:
        val: [dvbgse.PING_REPLY_OFF, dvbgse.PING_REPLY_ON]
-   id: ipaddr_spoof
    label: UDP IP Address Spoofing
    dtype: enum
    options: [IPADDR_SPOOF_OFF, IPADDR_SPOOF_ON]
    option_labels: ['Off', 'On']
    option_attributes:
        hide_ipaddr: [all, none]
        val: [dvbgse.IPADDR_SPOOF_OFF, dvbgse.IPADDR_SPOOF_ON]
-   id: src_address
    label: Source IP Address
    dtype: string
    hide: ${ ipaddr_spoof.hide_ipaddr }
-   id: dst_address
    label: Destination IP Address
    dtype: string
    hide: ${ ipaddr_spoof.hide_ipaddr }
-   id: gse_padding
    label: Padding Packet Length
    dtype: enum
    options: [PADDING_PACKET_LENGTH_0, PADDING_PACKET_LENGTH_1]
    option_labels: ['0 byte', '1 byte']
    option_attributes:
        val: [dvbgse.PADDING_PACKET_LENGTH_0, dvbgse.PADDING_PACKET_LENGTH_1]
-   id: max_frames_in_flight
    label: Maximum frames in flight
    dtype: int
    default: -1

inputs:
-   label: frame_notification
    domain: message
    optional: 1
outputs:
-   domain: stream
    dtype: byte

templates:
    imports: import dvbgse
    make: "dvbgse.bbheader_source(${standard.val}, \n% if str(standard) == 'STANDARD_DVBT2':\n\
        ${framesize1.val}, \n% else:\n${framesize2.val}, \n% endif\n% if str(standard)\
        \ == 'STANDARD_DVBT2':\n% if str(framesize1) == 'FECFRAME_NORMAL':\n${rate1.val},\
        \ \n% else:\n${rate2.val}, \n% endif\n% else:\n% if str(framesize2) == 'FECFRAME_NORMAL':\n\
        ${rate3.val}, \n% elif str(framesize2) == 'FECFRAME_MEDIUM':\n${rate4.val},\
        \ \n% else:\n${rate5.val}, \n% endif\n% endif\n${rolloff.val}, ${inband.val},\
        \ ${fecblocks}, ${tsrate}, ${ping_reply.val}, ${ipaddr_spoof.val},\
        \ ${src_address}, ${dst_address}, ${gse_padding.val}, ${max_frames_in_flight})"

file_format: 1
